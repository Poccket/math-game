#!/bin/bash
#	https://www.youtube.com/watch?v=4Lb-6rxZxx0
#	Simulation of monty hall problem, to prove it to my dad
#		- Player 1 (Monty Hall) would provide 3 doors, two of which
#		  contain goats, one of which contains a car (grand prize)
#		- Player 2 selects the door which they think contains the c
#		  ar
#		- Player 1 reveals one of the unselected doors, which conta
#		  ins a goat, then offers Player 2 the option to switch the
#		  ir selection to the other (unrevealed) door.
#		- Once Player 2 declines or accepts the offer, the door tha
#		  t is currently selected is revealed

#	The following "strategies" will be tested $simRunTime times:
simRunTime=100000
theLazinessDivider=1000
#		- Player 1 selects their door and then it is revealed
#		  (ends at step 2)
#		NOTE:
#		    This was done to prove to my sister that it was indeed 
#		    1 in 3 chance that the selected door is the prize, but 
#		    I realized that this and always saying "No" are literal
#		    ly exactly the same, so this is effectively always sayi
#		    ng no.
#		    So, I put the original intention of this test here, and
#		    put the more obvious purpose in the 'echo' command wher
#		    e the actual test is ran.
effectivenessA=0
#		- Player 1 selects their door, then when offered the switch
#		  they will always say "Yes"
effectivenessB=0
#	The winrate will be determined as a percentage
#	Winrates will be logged to console
#	I hate file logs they're too big
runDate=`date '+%Y-%m-%d-%H:%M:%S'`

echo "Tests will be run $simRunTime times" 
echo "Time of running is $runDate"

#	This is strategy A.
echo " "
echo "Test A:"
echo "    Pick random door, Always say "No.""
for i in $(seq 1 $simRunTime);
do
#	Here we determine $a and $b randomly as a number between 1 and 3
	a=$((1 + RANDOM % 3))
	b=$((1 + RANDOM % 3))
#	Then we check if $a and $b are equal
	if [ "$a" -eq "$b" ]
	then
#		If they are, add 1 to $effectivenessA
		((effectivenessA++))
	fi
done
# When it's done it will print $effectivenessA divided by the laziness divider to get a percentage
echo "$(($effectivenessA / $theLazinessDivider))% winrate on test A ($effectivenessA/$simRunTime tests completed)"

#	This is strategy B.
echo " "
echo "Test B:"
echo "    Pick random door, Always say "Yes.""
for i in $(seq 1 $simRunTime);
do
#	Here we determine $a and $b randomly as a number between 1 and 3
	a=$((1 + RANDOM % 3))
	b=$((1 + RANDOM % 3))
#	Then we make $b_Old the same as $b
	b_Old=$b
#	Then $c the same as $a
	c=$a
#	Then, while $c is the same as $a, or while $c is the same as $b
	while [[ "$c" -eq "$a" || "$c" -eq "$b" ]]
	do
#		Generate a new number for $c between 1 and 3
		c=$((1 + RANDOM % 3))
	done
#	Then, while $b is the same as $c, or while $b is the same as $b_Old
	while [[ "$b" -eq "$c" || "$b" -eq "$b_Old" ]]
	do
#		Generate a new number for $b between 1 and 3
		b=$((1 + RANDOM % 3))
	done
#	Then we check if $a and $b are the same
	if [ "$a" -eq "$b" ]
	then
#		If they are, add 1 to $effectivenessB
		((effectivenessB++))
	fi
done
# When it's done it will print $effectivenessB divided by the laziness divider to get a percentage
echo "$(($effectivenessB / $theLazinessDivider))% winrate on test B ($effectivenessB/$simRunTime tests completed)"

#	This is strategy C.
echo " "
echo "Test C:"
echo "    Pick random door, Randomly decide on switching"
for i in $(seq 1 $simRunTime);
do
	doSwitch=$((1 + RANDOM % 2))
if [ "$doSwitch" -eq 1 ]
then
	#	Here we determine $a and $b randomly as a number between 1 and 3
		a=$((1 + RANDOM % 3))
		b=$((1 + RANDOM % 3))
	#	Then we check if $a and $b are equal
		if [ "$a" -eq "$b" ]
		then
	#		If they are, add 1 to $effectivenessC
			((effectivenessC++))
		fi
elif [ "$doSwitch" -eq 2 ]
then
	#	Here we determine $a and $b randomly as a number between 1 and 3
		a=$((1 + RANDOM % 3))
		b=$((1 + RANDOM % 3))
	#	Then we make $b_Old the same as $b
		b_Old=$b
	#	Then $c the same as $a
		c=$a
	#	Then, while $c is the same as $a, or while $c is the same as $b
		while [[ "$c" -eq "$a" || "$c" -eq "$b" ]]
		do
	#		Generate a new number for $c between 1 and 3
			c=$((1 + RANDOM % 3))
		done
	#	Then, while $b is the same as $c, or while $b is the same as $b_Old
		while [[ "$b" -eq "$c" || "$b" -eq "$b_Old" ]]
		do
	#		Generate a new number for $b between 1 and 3
			b=$((1 + RANDOM % 3))
		done
	#	Then we check if $a and $b are the same
		if [ "$a" -eq "$b" ]
		then
	#		If they are, add 1 to $effectivenessC
			((effectivenessC++))
		fi
fi
done
# When it's done it will print $effectivenessC divided by the laziness divider to get a percentage
echo "$(($effectivenessC / $theLazinessDivider))% winrate on test A ($effectivenessC/$simRunTime tests completed)"

echo "Tests complete"
echo " "
